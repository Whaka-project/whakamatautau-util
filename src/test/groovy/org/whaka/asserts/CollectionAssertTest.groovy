package org.whaka.assertsimport spock.lang.Specificationimport org.whaka.asserts.builder.CollectionAssertPerformer
class CollectionAssertTest extends Specification {
	def "creation"() {		when:			CollectionAssert<?> _assert = new CollectionAssert<?>(actual)		then:			_assert.getActual() == actual		where:			actual << [null, [], Arrays.asList(12, 22, 33), new HashSet<Integer>()]	}	def "is-not-empty"() {		when:			new CollectionAssert<?>([12]).isNotEmpty()		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([]).isNotEmpty()		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [], "Not []", CollectionAssertPerformer.MESSAGE_NOT_EMPTY_COLLECTION_EXPECTED)		when:			new CollectionAssert<?>(null).isNotEmpty("Sup!")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, "Not []", "Sup!")	}	def "is-empty"() {		when:			new CollectionAssert<?>([]).isEmpty()		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([42]).isEmpty()		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [42], [], CollectionAssertPerformer.MESSAGE_EMPTY_COLLECTION_EXPECTED)		when:			new CollectionAssert<?>(null).isEmpty("EMPTYYY!")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, [], "EMPTYYY!")	}	def "is-empty-or-null"() {		when:			new CollectionAssert<?>([]).isEmptyOrNull()		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([42]).isEmptyOrNull()		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [42], [], CollectionAssertPerformer.MESSAGE_EMPTY_OR_NULL_COLLECTION_EXPECTED)		when:			new CollectionAssert<?>([null]).isEmptyOrNull("555")		then:			AssertError errorEmpty2 = thrown()			checkError(errorEmpty2, [null], [], "555")		when:			new CollectionAssert<?>(null).isEmptyOrNull("EMPTYYY!")		then:			notThrown(AssertError)	}	def "is-size"() {		when:			new CollectionAssert<?>([]).isSize(0)		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([42]).isSize(1)		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([42]).isSize(0)		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [42], "Size 0", CollectionAssertPerformer.MESSAGE_ILLEGAL_COLLECTION_SIZE)		when:			new CollectionAssert<?>([null]).isSize(12, "SIZEEEE!")		then:			AssertError errorEmpty2 = thrown()			checkError(errorEmpty2, [null], "Size 12", "SIZEEEE!")		when:			new CollectionAssert<?>(null).isSize(0, "This doesn't work")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, "Size 0", "This doesn't work")	}	def "contains"() {		when:			new CollectionAssert<?>([12]).contains(12)		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([1,2,3]).contains(2)		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).contains(null)		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4)]).contains(arr(2,3), "Deeeeeep")		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).contains(12)		then:			AssertError e = thrown()			checkError(e, [null], "All of [12]", CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([1,2,3]).contains(null, null)		then:			AssertError e2 = thrown()			checkError(e2, [1,2,3], "All of [null]", CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4)]).contains(arr(5,3), "Nan")		then:			AssertError e3 = thrown()			checkError(e3, [arr(2,3),arr(3,4)], "All of [[5, 3]]", "Nan")		when:			new CollectionAssert<?>([]).contains(null, "Wanna null")		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [], "All of [null]", "Wanna null")		when:			new CollectionAssert<?>(null).contains(null, "Null source never works")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, "All of [null]", "Null source never works")	}	def "contains-any"() {		when:			new CollectionAssert<?>([12]).containsAny([1,null,12,"qwe"])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([1,2,3]).containsAny([2])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).containsAny([null])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).containsAny([])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4)]).containsAny([arr(5,6),arr(2,3)], "Deeeeeep")		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).containsAny([12])		then:			AssertError e = thrown()			checkError(e, [null], "Any of [12]", CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([1,2,3]).containsAny([null,42], null)		then:			AssertError e2 = thrown()			checkError(e2, [1,2,3], "Any of [null, 42]", CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4)]).containsAny([arr(5,3),arr(4,3)], "Nan")		then:			AssertError e3 = thrown()			checkError(e3, [arr(2,3),arr(3,4)], "Any of [[5, 3], [4, 3]]", "Nan")		when:			new CollectionAssert<?>([]).containsAny([null], "Wanna null")		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [], "Any of [null]", "Wanna null")		when:			new CollectionAssert<?>(null).containsAny([12], "Null source never works")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, "Any of [12]", "Null source never works")		when:			new CollectionAssert<?>(null).containsAny([], "Null source never never never works")		then:			AssertError errorNull2 = thrown()			checkError(errorNull2, null, "Any of []", "Null source never never never works")	}	def "contains-all"() {		when:			new CollectionAssert<?>([12]).containsAll([12])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([1,2,3]).containsAll([1,3])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null,null]).containsAll([null])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).containsAll([])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4),12]).containsAll([arr(3,4),arr(2,3)], "Deeeeeep")		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).containsAll([12])		then:			AssertError e = thrown()			checkError(e, [null], "All of [12]", CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([1,2,3]).containsAll([2,3,4], null)		then:			AssertError e2 = thrown()			checkError(e2, [1,2,3], "All of [2, 3, 4]", CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4)]).containsAll([arr(2,3),arr(4,3)], "Nan")		then:			AssertError e3 = thrown()			checkError(e3, [arr(2,3),arr(3,4)], "All of [[2, 3], [4, 3]]", "Nan")		when:			new CollectionAssert<?>([]).containsAll([null], "Wanna null")		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [], "All of [null]", "Wanna null")		when:			new CollectionAssert<?>(null).containsAll([12], "Null source never works")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, "All of [12]", "Null source never works")		when:			new CollectionAssert<?>(null).containsAll([], "Null source never never never works")		then:			AssertError errorNull2 = thrown()			checkError(errorNull2, null, "All of []", "Null source never never never works")	}	def "contains-equal-elements"() {		when:			new CollectionAssert<?>([12]).containsSameElements([12])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([1,2,3]).containsSameElements([1,3,2])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null,null]).containsSameElements([null,null])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([]).containsSameElements([])		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4),12]).containsSameElements([arr(3,4),12,arr(2,3)], "Deeeeeep")		then:			notThrown(AssertError)		when:			new CollectionAssert<?>([null]).containsSameElements([12])		then:			AssertError e = thrown()			checkError(e, [null], [12], CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([1,2,3]).containsSameElements([2,3,4], (String) null)		then:			AssertError e2 = thrown()			checkError(e2, [1,2,3], [2, 3, 4], CollectionAssertPerformer.MESSAGE_COLLECTION_NOT_CONTAINS_EXPECTED_VALUES)		when:			new CollectionAssert<?>([arr(2,3),arr(3,4)]).containsSameElements([arr(2,3),arr(4,3)], "Nan")		then:			AssertError e3 = thrown()			checkError(e3, [arr(2,3),arr(3,4)], [[2, 3], [4, 3]], "Nan")		when:			new CollectionAssert<?>([]).containsSameElements([null], "Wanna null")		then:			AssertError errorEmpty = thrown()			checkError(errorEmpty, [], [null], "Wanna null")		when:			new CollectionAssert<?>(null).containsSameElements([12], "Null source never works")		then:			AssertError errorNull = thrown()			checkError(errorNull, null, [12], "Null source never works")		when:			new CollectionAssert<?>(null).containsSameElements([], "Null source never never never works")		then:			AssertError errorNull2 = thrown()			checkError(errorNull2, null, [], "Null source never never never works")	}	private void checkError(AssertError e, Object actual, Object expected, String message) {		assert e.getResults().size() == 1		AssertResult result = e.getResults()[0]		assert result.getActual() == actual		assert result.getExpected() == expected		assert result.getMessage() == message	}	private int[] arr(int[] arr) {		return arr	}}
